#define DHTTYPE DHT22
#include <DHT_U.h>
#include <Arduino.h>
#if defined(ESP32)
#include <WiFi.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#endif
#include <Firebase_ESP_Client.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <SparkFun_Qwiic_Scale_NAU7802_Arduino_Library.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

#define DHTPIN 14
#define BUZZER_PIN 4       // Buzzer connected to D4
#define RAIN_SENSOR_PIN 23 // Rain sensor connected to D23
#define MQ2_PIN 2          // MQ2 Gas Sensor connected to D2
DHT dht(DHTPIN, DHTTYPE);

#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define WIFI_SSID "Engineers Home"
#define WIFI_PASSWORD "sky12345"
#define API_KEY "AIzaSyCCn5ffP3xGPDTEMUbsMuHgNaacNQlhAt8"
#define DATABASE_URL "tuhin-a98b8-default-rtdb.firebaseio.com/"

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
bool signupOK = false;

#define RELAY_PIN 13
#define AOUT_PIN 36

float ph = 7.6;
float ox = 91; // Initial AQI value

// NPK values pattern
float nitrogenValues[] = {50, 48, 53};
float phosphorusValues[] = {120, 119, 124};
float potassiumValues[] = {113, 107, 115};
float nitrogen, phosphorus, potassium; // Declare these variables globally
int npkIndex = 0;

unsigned long previousMillisPh = 0;
unsigned long previousMillisOx = 0;
unsigned long previousMillisNPK = 0;

void setup() {
 Serial.begin(115200);
 dht.begin();

 pinMode(DHTPIN, INPUT);
 pinMode(RELAY_PIN, OUTPUT);
 pinMode(BUZZER_PIN, OUTPUT);  // Set up buzzer
 pinMode(RAIN_SENSOR_PIN, INPUT);  // Set up rain sensor
 pinMode(MQ2_PIN, INPUT);  // Set up MQ2 sensor

 // Start buzzer for 1 second when device turns on
 digitalWrite(BUZZER_PIN, HIGH);
 delay(1000);
 digitalWrite(BUZZER_PIN, LOW);

 WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
 Serial.print("Connecting to Wi-Fi");
 while (WiFi.status() != WL_CONNECTED) {
   Serial.print(".");
   delay(300);
 }
 Serial.println();
 Serial.print("Connected with IP: ");
 Serial.println(WiFi.localIP());
 Serial.println();

 config.api_key = API_KEY;
 config.database_url = DATABASE_URL;

 if (Firebase.signUp(&config, &auth, "", "")) {
   Serial.println("Sign up successful");
   signupOK = true;
 } else {
   Serial.printf("Sign up failed: %s\n", config.signer.signupError.message.c_str());
 }

 config.token_status_callback = tokenStatusCallback;
 Firebase.begin(&config, &auth);
 Firebase.reconnectWiFi(true);

 if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
   Serial.println(F("SSD1306 allocation failed"));
   for (;;) {}
 }
 delay(2000);
 display.clearDisplay();
 display.setTextColor(WHITE);
}

void loop() {
 delay(5000);

 // Reading DHT sensor values
 float h = dht.readHumidity();
 float t = dht.readTemperature();

 // Reading moisture sensor value
 float value = analogRead(AOUT_PIN);
 float value1 = map(value, 2300, 900, 0, 100);

 // Update NPK values every 3 seconds in a sequence
 if (millis() - previousMillisNPK >= 3000) {
   previousMillisNPK = millis();
   nitrogen = nitrogenValues[npkIndex];
   phosphorus = phosphorusValues[npkIndex];
   potassium = potassiumValues[npkIndex];
   npkIndex = (npkIndex + 1) % 3; // Cycle through the three values
 }

 // Auto-change pH value every 3 seconds between 5.7 and 8.5
 if (millis() - previousMillisPh >= 3000) {
   previousMillisPh = millis();
   ph = random(57, 86) / 10.0; // Generate pH between 5.7 and 8.5
 }

 // Auto-change AQI value every 8 seconds between 91 and 98
 if (millis() - previousMillisOx >= 8000) {
   previousMillisOx = millis();
   ox = random(91, 99); // AQI between 91 and 98
 }

 // Rain sensor reading
 int rainSensorValue = digitalRead(RAIN_SENSOR_PIN);
 String rainStatus = (rainSensorValue == LOW) ? "Rain" : "No Rain";

 // MQ2 Gas sensor reading
 int gasSensorValue = analogRead(MQ2_PIN);
 String gasStatus = (gasSensorValue > 300) ? "Gas Detected" : "No Gas";  // Threshold of 300 can be adjusted based on your setup

 // If sensor reading fails, display an error
 if (isnan(h) || isnan(t)) {
   Serial.println("Failed to read from DHT sensor!");
 } else {
   // Printing values to Serial Monitor
   Serial.print("Humidity: ");
   Serial.println(h);
   Serial.print("Temperature: ");
   Serial.println(t);
   Serial.print("Moisture value: ");
   Serial.println(value1);
   Serial.print("Rain Status: ");
   Serial.println(rainStatus);
   Serial.print("Gas Status: ");
   Serial.println(gasStatus);

   // Send data to Firebase
   if (Firebase.ready() && signupOK) {
     Firebase.RTDB.set(&fbdo, "/humidity", String(h));
     Firebase.RTDB.set(&fbdo, "/temperature", String(t));
     Firebase.RTDB.set(&fbdo, "/Moisture", String(value1));
     Firebase.RTDB.set(&fbdo, "/Nitrogen", String(nitrogen));
     Firebase.RTDB.set(&fbdo, "/Phosphorus", String(phosphorus));
     Firebase.RTDB.set(&fbdo, "/Potassium", String(potassium));
     Firebase.RTDB.set(&fbdo, "/PH", String(ph));
     Firebase.RTDB.set(&fbdo, "/AirQuality", String(ox));
     Firebase.RTDB.set(&fbdo, "/Location", "DHAKA,1200");

     // Send rain status and gas status
     Firebase.RTDB.set(&fbdo, "/RainStatus", rainStatus);
     Firebase.RTDB.set(&fbdo, "/GasStatus", gasStatus);

     // Control relay based on thresholds
     controlRelay(t, value);
   } else {
     Serial.println("Firebase not ready or signup failed");
     Serial.println("Reason: " + fbdo.errorReason());
   }

   // Clear display buffer
   display.clearDisplay();

   // Display values on OLED
   display.setTextSize(1);

   // Left side for basic readings
   display.setCursor(0, 10);
   display.print("T: ");
   display.print(t);
   display.print(" C  ");

   display.setCursor(0, 20);
   display.print("H: ");
   display.print(h);
   display.print(" %  ");

   display.setCursor(0, 30);
   display.print("M: ");
   display.print(value1);
   display.print(" %   ");

   display.setCursor(0, 40);
   display.print("Rain:");
   display.print(rainStatus);

   display.setCursor(0, 50);
   display.print("Gas:");
   display.print(gasStatus);

   // Right side for Gas Status and NPK
   display.setCursor(60, 10);
   display.print("N: ");
   display.print(nitrogen);

   display.setCursor(60, 20);
   display.print(" P: ");
   display.print(phosphorus);

   display.setCursor(60, 30);
   display.print(" K: ");
   display.print(potassium);

   display.setCursor(60, 40);
   display.print(" pH:");
   display.print(ph);

   display.setCursor(60, 50);
   display.print(" AQI:");
   display.print(ox);

   display.display();
 }
}

void controlRelay(float temp, float value) {
 float tempThreshold = 38.0; // Temperature threshold
 float moistureThreshold = 1300.0; // Soil moisture threshold

 if (temp >= tempThreshold || value > moistureThreshold) {
   digitalWrite(RELAY_PIN, HIGH); // Turn on relay
 } else {
   digitalWrite(RELAY_PIN, LOW); // Turn off relay
 }
}
